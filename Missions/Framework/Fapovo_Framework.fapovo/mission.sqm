version=54;
class EditorData
{
	moveGridStep=1;
	angleGridStep=0.2617994;
	scaleGridStep=1;
	autoGroupingDist=10;
	toggles=10;
	mods[]=
	{
		"3denEnhanced"
	};
	class ItemIDProvider
	{
		nextID=2;
	};
	class Camera
	{
		pos[]={363.40768,49.325863,5459.7974};
		dir[]={-0.24807198,-0.084805079,0.96502894};
		up[]={-0.021114733,0.99639612,0.082138509};
		aside[]={0.96851796,-1.7236744e-008,0.24896926};
	};
};
binarizationWanted=0;
sourceName="Fapovo_Framework";
addons[]=
{
	"A3_Ui_F"
};
class AddonsMetaData
{
	class List
	{
		items=1;
		class Item0
		{
			className="A3_Ui_F";
			name="Arma 3 - User Interface";
			author="Bohemia Interactive";
			url="https://www.arma3.com";
		};
	};
};
randomSeed=16562386;
class ScenarioData
{
	author="501st Mission Builders";
	briefing=0;
	debriefing=0;
	disabledAI=1;
	respawn=3;
	class Header
	{
		gameType="Coop";
	};
};
class CustomAttributes
{
	class Category0
	{
		name="Multiplayer";
		class Attribute0
		{
			property="ENH_dynamicSkill";
			expression="if (!is3DEN && _value # 0 && isServer) then      {        _value params        [          '_enable',          '_skillMinBLUFOR',          '_skillAimMinBLUFOR',          '_skillMaxBLUFOR',          '_skillAimMaxBlUFOR',          '_skillMinOPFOR',          '_skillAimMinOPFOR',          '_skillMaxOPFOR',          '_skillAimMaxOPFOR',          '_skillMinINDFOR',          '_skillAimMinINDFOR',          '_skillMaxINDFOR',          '_skillAimMaxINDFOR'        ];        [          true,          [            [WEST, _skillMinBLUFOR, _skillAimMinBLUFOR, _skillMaxBLUFOR, _skillAimMaxBlUFOR],            [EAST, _skillMinOPFOR, _skillAimMinOPFOR, _skillMaxOPFOR, _skillAimMaxOPFOR],            [INDEPENDENT, _skillMinINDFOR, _skillAimMinINDFOR, _skillMaxINDFOR, _skillAimMaxINDFOR]          ]        ] call BIS_fnc_EXP_camp_dynamicAISkill;      }";
			class Value
			{
				class data
				{
					class type
					{
						type[]=
						{
							"ARRAY"
						};
					};
					class value
					{
						items=13;
						class Item0
						{
							class data
							{
								class type
								{
									type[]=
									{
										"BOOL"
									};
								};
								value=0;
							};
						};
						class Item1
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.5;
							};
						};
						class Item2
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.30000001;
							};
						};
						class Item3
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.80000001;
							};
						};
						class Item4
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.5;
							};
						};
						class Item5
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.5;
							};
						};
						class Item6
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.30000001;
							};
						};
						class Item7
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.80000001;
							};
						};
						class Item8
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.5;
							};
						};
						class Item9
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.5;
							};
						};
						class Item10
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.30000001;
							};
						};
						class Item11
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.80000001;
							};
						};
						class Item12
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0.5;
							};
						};
					};
				};
			};
		};
		class Attribute1
		{
			property="RespawnTemplates";
			expression="true";
			class Value
			{
				class data
				{
					class type
					{
						type[]=
						{
							"ARRAY"
						};
					};
				};
			};
		};
		nAttributes=2;
	};
	class Category1
	{
		name="Scenario";
		class Attribute0
		{
			property="ENH_SPR";
			expression="if (!is3DEN && _value # 0 > 0 && !isMultiplayer) then      {        ENH_SPR_Ruleset = _value param [0, 0];        ENH_SPR_Delay = _value param [1, 20];        ENH_SPR_CanDie = _value param [2, false];        ENH_SPR_RestoreLoadout = _value param [3, false];        ENH_SPR_OnRespawnCode = compile (_value param [4, '']);        ENH_SPR_Positions =        [          allMapMarkers select {'respawn_east' in toLower _x} apply {getMarkerPos _x},          allMapMarkers select {'respawn_west' in toLower _x} apply {getMarkerPos _x},          allMapMarkers select {'respawn_guerilla' in toLower _x} apply {getMarkerPos _x},          allMapMarkers select {'respawn_civilian' in toLower _x} apply {getMarkerPos _x}        ];        {          _x setVariable ['ENH_SPR_OriginalSide', side group _x];          _x setVariable ['ENH_SPR_OriginalLoadout', getUnitLoadout _x];          _x addEventHandler ['handleDamage',          {            params ['_unit', '', '_damage', '', '', '_index'];            if (!alive _unit || lifeState _unit isEqualTo 'INCAPACITATED') exitWith {0};            if (_unit getVariable ['ENH_SPR_Tickets', 0] == 0) then            {              _unit removeEventHandler ['handleDamage', _thisEventHandler];              _damage;            };            if (ENH_SPR_CanDie && _index in [1, 2] && _damage >= 1) exitWith            {              _unit removeEventHandler ['handleDamage', _thisEventHandler];              1;            };            if (_index < 8 && (_damage min 0.95) == 0.95) then            {              setAccTime 1;              _unit allowDamage false;              _unit setCaptive true;              _unit setUnconscious true;              _unit setVariable ['ENH_SPR_Tickets', (_unit getVariable ['ENH_SPR_Tickets', 0]) - 1];              if (isPlayer _unit) then {enableTeamSwitch false} else {removeSwitchableUnit _unit};              moveOut _unit;              _unit spawn ENH_fnc_SPR_respawnTimer;            };            _damage min 0.95;          }];        } forEach (allUnits select {_x getVariable ['ENH_SPR_Tickets', 0] > 0});                ENH_fnc_SPR_respawn =        {          scriptName 'ENH_Attribute_SPR_Respawn';          params ['_unit'];          if (isPlayer _unit) then {enableTeamSwitch true} else {addSwitchableUnit _unit};          if (ENH_SPR_RestoreLoadout) then {_unit setUnitLoadout (_unit getVariable 'ENH_SPR_OriginalLoadout')};          private _sideID = (_unit getVariable 'ENH_SPR_OriginalSide') call BIS_fnc_sideID;          private _positions = ENH_SPR_Positions select _sideID;          if (_positions isNotEqualTo []) then          {            switch (ENH_SPR_Ruleset) do            {              case 3:              {                _unit setPos (([_positions, [], {_unit distance _x}, 'ASCEND'] call BIS_fnc_sortBy) select 0);              };              case 2:              {                _unit setPos selectRandom _positions;              };            };          };          _unit setUnconscious false;          _unit allowDamage true;          _unit setDamage 0;          _unit switchMove '';          _unit call ENH_SPR_OnRespawnCode;          _unit spawn          {            sleep 8;            _this setCaptive false;          };        };                ENH_fnc_SPR_respawnTimer =        {          scriptName 'ENH_Attribute_SPR_RespawnTimer';          params ['_unit'];          private _respawnTime = time + ENH_SPR_Delay;          if (isPlayer _unit) then          {            private _ctrlRespawnTimer = (call BIS_fnc_displayMission) ctrlCreate ['RscStructuredText',-1];            _ctrlRespawnTimer ctrlSetPosition [0.25, 0, 0.5, 0.06];            _ctrlRespawnTimer ctrlSetBackgroundColor [0, 0, 0, 0.1];            _ctrlRespawnTimer ctrlCommit 0;            ENH_SPR_OriginalVolume = [soundVolume, musicVolume, radioVolume, speechVolume, environmentVolume];            0 cutText ['', 'BLACK OUT', 0.3];            0.3 fadeSound 0;            0.3 fadeMusic 0;            0.3 fadeRadio 0;            0.3 fadeSpeech 0;            0.3 fadeEnvironment 0;            showChat false;            while {time < _respawnTime} do            {              _ctrlRespawnTimer ctrlSetStructuredText parseText format ['<t size=''1.25'' color=''#218a36'' align=''center''>%1</t>', [(_respawnTime - time), 'HH:MM'] call BIS_fnc_timeToString];              sleep 0.1;            };            ctrlDelete _ctrlRespawnTimer;            0 cutText ['', 'BLACK IN', 8];            8 fadeSound (ENH_SPR_OriginalVolume # 0);            8 fadeMusic (ENH_SPR_OriginalVolume # 1);            8 fadeRadio (ENH_SPR_OriginalVolume # 2);            8 fadeSpeech (ENH_SPR_OriginalVolume # 3);            8 fadeEnvironment (ENH_SPR_OriginalVolume # 4);            showChat true;            [              ['Respawned'],              [format ['GRID: %1', mapGridPosition _unit]],              [format ['Tickets left: %1', _unit getVariable 'ENH_SPR_Tickets']]            ] spawn BIS_fnc_EXP_camp_SITREP;          }          else          {            if ((side player getFriend (_unit getVariable 'ENH_SPR_OriginalSide')) >= 0.6) then            {              [                str _unit, 'onEachFrame',                {                  drawIcon3D ['\a3\Modules_f\data\portraitRespawn_ca.paa', [0.13, 0.54, 0.21, 0.8], ASLToAGL ((_this # 0) modelToWorldVisualWorld [0, 0, 1]), 1, 1, 0, str round ((_this # 1) - time), 2];                },                [_unit, _respawnTime]              ] call BIS_fnc_addStackedEventHandler;            };            sleep ENH_SPR_Delay;          };          [str _unit, 'onEachFrame'] call BIS_fnc_removeStackedEventHandler;          _unit call ENH_fnc_SPR_respawn;        };      }";
			class Value
			{
				class data
				{
					class type
					{
						type[]=
						{
							"ARRAY"
						};
					};
					class value
					{
						items=5;
						class Item0
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=0;
							};
						};
						class Item1
						{
							class data
							{
								class type
								{
									type[]=
									{
										"SCALAR"
									};
								};
								value=20;
							};
						};
						class Item2
						{
							class data
							{
								class type
								{
									type[]=
									{
										"BOOL"
									};
								};
								value=0;
							};
						};
						class Item3
						{
							class data
							{
								class type
								{
									type[]=
									{
										"BOOL"
									};
								};
								value=0;
							};
						};
						class Item4
						{
							class data
							{
								class type
								{
									type[]=
									{
										"STRING"
									};
								};
								value="";
							};
						};
					};
				};
			};
		};
		nAttributes=1;
	};
};
class Mission
{
	assetType="Free";
	class Intel
	{
		resistanceWest=0;
		timeOfChanges=1800.0002;
		startWeather=0.2;
		startFog=0.15000001;
		startWind=0.60000002;
		startWaves=0.1;
		forecastWeather=0;
		forecastWind=0.1;
		forecastWaves=0.1;
		forecastLightnings=0.1;
		wavesForced=1;
		windForced=1;
		year=2011;
		month=4;
		day=26;
		hour=17;
		minute=17;
		startFogBase=3;
		startFogDecay=0.1;
		forecastFogDecay=0.014;
	};
	class Entities
	{
		items=2;
		class Item0
		{
			dataType="Marker";
			position[]={298.88501,9.9520264,5596.5547};
			name="FOB_Nativity";
			type="Empty";
			id=0;
			atlOffset=51.812027;
		};
		class Item1
		{
			dataType="Marker";
			position[]={298.91901,531.87524,5596.4375};
			name="venator";
			type="Empty";
			id=1;
			atlOffset=573.73523;
		};
	};
};
